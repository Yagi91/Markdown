{"version":3,"sources":["actions/msgAction.js","actions/constants.js","components/markdown.js","App.js","reducers/messageReducer.js","app/store.js","serviceWorker.js","index.js"],"names":["MsgCreator","input","type","marked","require","Markdown","props","handleChange","bind","event","this","target","value","className","for","wrap","rows","messages","id","name","onChange","dangerouslySetInnerHTML","__html","React","Component","connect","state","preview","dispatch","App","MessageReducer","action","data","store","configureStore","reducer","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"6RAKeA,EAHW,SAACC,GACzB,MAAO,CAAEC,KCHK,MDGUD,MAAOA,I,eEG7BE,EAASC,EAAQ,IAGfC,E,kDACJ,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IACDC,aAAe,EAAKA,aAAaC,KAAlB,gBAFH,E,gDAInB,SAAaC,GACXC,KAAKJ,MAAML,MAAMQ,EAAME,OAAOC,S,oBAEhC,WACE,OACE,sBAAKC,UAAU,WAAf,UACE,2BACA,uBAAMA,UAAU,WAAhB,UACE,uBAAOC,IAAI,SAASD,UAAU,OAA9B,mCAGA,0BACEE,KAAK,KAELC,KAAK,KACLJ,MAAOF,KAAKJ,MAAMW,SAClBC,GAAG,SACHC,KAAK,SACLC,SAAUV,KAAKH,eAEjB,4BACE,4DAGJ,sBAAKM,UAAU,MAAf,UACE,qBAAKA,UAAU,OAAf,uBACA,8BACE,qBACEA,UAAU,YACVK,GAAG,UACHG,wBAAyB,CACvBC,OAAQnB,EAAOO,KAAKJ,MAAMW,yB,GApCnBM,IAAMC,WA4DdC,eAdS,SAACC,GACvB,MAAO,CACLT,SAAUS,EAAMC,YAIO,SAACC,GAC1B,MAAO,CACL3B,MAAO,SAACA,GACN2B,EAAS5B,EAAWC,QAKXwB,CAA6CpB,G,MCzD7CwB,MARf,SAAavB,GACX,OACE,qBAAKO,UAAU,MAAf,SACE,cAAC,EAAD,O,QCiBSiB,EAbQ,SAACJ,EAAOK,GAI7B,OAHAL,EAAQ,CACNM,KAAK,uYAECD,EAAO7B,MACb,IAAK,MAEH,OADAwB,EAAMM,KAAOD,EAAO9B,MACbyB,EAAMM,KACf,QACE,OAAON,EAAMM,OCjBNC,EAAQC,YAAe,CAClCC,QAAS,CAAER,QAASG,KCQFM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,IAAD,CAAUV,MAAOA,EAAjB,SACE,cAAC,EAAD,QAGJW,SAASC,eAAe,SDqHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAACC,GAClCA,EAAaC,kB","file":"static/js/main.675e0351.chunk.js","sourcesContent":["import Message from \"./constants\";\r\n\r\nexport const MsgCreator = (input) => {\r\n  return { type: Message, input: input };\r\n};\r\nexport default MsgCreator;\r\n","const Message = \"ADD\";\r\nexport default Message;\r\n","import React from \"react\";\r\nimport { connect } from \"react-redux\";\r\nimport MsgCreator from \"../actions/msgAction\";\r\nimport \"../styles/markdown.css\";\r\n\r\n// let markdown = require(\"markdown\").markdown;\r\nlet marked = require(\"marked\");\r\n// console.log(\"this is the markdown : \", markdown.toHTML(\"Hello *World*!\"));\r\n\r\nclass Markdown extends React.Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.handleChange = this.handleChange.bind(this);\r\n  }\r\n  handleChange(event) {\r\n    this.props.input(event.target.value);\r\n  }\r\n  render() {\r\n    return (\r\n      <div className=\"markdown\">\r\n        <header></header>\r\n        <form className=\"form sub\">\r\n          <label for=\"editor\" className=\"head\">\r\n            Enter your text here:\r\n          </label>\r\n          <textarea\r\n            wrap=\"on\"\r\n            // cols=\"80\"\r\n            rows=\"40\"\r\n            value={this.props.messages}\r\n            id=\"editor\"\r\n            name=\"editor\"\r\n            onChange={this.handleChange}\r\n          ></textarea>\r\n          <p>\r\n            <em>--bryan(Yagi91_coder)</em>\r\n          </p>\r\n        </form>\r\n        <div className=\"sub\">\r\n          <div className=\"head\">Previewer</div>\r\n          <div>\r\n            <div\r\n              className=\"container\"\r\n              id=\"preview\"\r\n              dangerouslySetInnerHTML={{\r\n                __html: marked(this.props.messages),\r\n              }}\r\n            />\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    messages: state.preview,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    input: (input) => {\r\n      dispatch(MsgCreator(input));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(Markdown);\r\n","import React from \"react\";\nimport Markdown from \"./components/markdown\";\nimport \"./App.css\";\n\nfunction App(props) {\n  return (\n    <div className=\"App\">\n      <Markdown />\n    </div>\n  );\n}\n\nexport default App;\n","// const MessageReducer = (state = { data: \"\" }, action) => {\r\n//   // state = { data: \"\" };\r\n//   switch (action.type) {\r\n//     case \"ADD\":\r\n//       alert(typeof state);\r\n//       state.data = action.input;\r\n//       return state.data;\r\n//     default:\r\n//       return state.data;\r\n//   }\r\n// };\r\nconst MessageReducer = (state, action) => {\r\n  state = {\r\n    data: `# Welcome to my React Markdown Previewer!\\n## Example of a sub-header\\n\\nHeres some code, \\`<div></div>\\`, between 2 backtick characters.\\n\\n\\`\\`\\n// this is multi-line code:\\n\\nfunction add(num){\\n\\n return num+1;\\n\\n}\\n\\`\\`\\n\\nthis **text is bold** wow!\\n\\nYou can also add [Links](https://www.github.com/yagi91)\\n\\n>Bloc Quotes are handy\\n\\n- And of course there are lists.\\n\\n- list item2.`,\r\n  };\r\n  switch (action.type) {\r\n    case \"ADD\":\r\n      state.data = action.input;\r\n      return state.data;\r\n    default:\r\n      return state.data;\r\n  }\r\n};\r\n\r\nexport default MessageReducer;\r\n","import { configureStore } from \"@reduxjs/toolkit\";\nimport MessageReducer from \"../reducers/messageReducer\";\n\nexport const store = configureStore({\n  reducer: { preview: MessageReducer },\n});\n\n// import { createStore } from \"redux\";\n// export const store = createStore(MessageReducer);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then((registration) => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport { store } from \"./app/store\";\nimport { Provider } from \"react-redux\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}